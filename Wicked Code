#include <stdio.h>

#include <pthread.h>
#include <time.h>
#include <string.h>

//sudo gcc -Wall

//Initialization methods.
extern "C" int init_hardware();
extern "C" int init(int d_lev);

//Camera methods.
extern "C" int take_picture();
extern "C" char get_pixel(int row, int col, int color);
extern "C" void set_pixel(int col, int row, char red, char green, char blue);

//Motor method.
extern "C" int set_motor(int motor,int speed);

//Utility methods.
extern "C" int read_analog(int ch_adc);
extern "C" int Sleep(int sec, int usec);
extern "C" int select_IO(int chan, int direct);
extern "C" int write_digital(int chan, char level);
extern "C" int read_digital(int chan);
extern "C" int set_PWM(int chan, int value);

//Server methods.
extern "C" int connect_to_server(char server_addr[15], int port);
extern "C" int send_to_server(char message[24]);
extern "C" int receive_from_server(char message[24]);

//Constant variables.
int speed = 50;
int turn_sharpness = 30;
char luminosity_threshold = 127;

//Function declarations.
float locate_line();

int main(){

    init(0);

    set_motor(1, 0);
    set_motor(2, 0);

    float proportional_error;

    while(true){

        proportional_error = locate_line(); //Find the proportional error of the line by using the locate_line method. Parameter is the row of the image to use.

        printf("Current ERROR is:%d\n", proportional_error);

        //Make sure the locate line method is returning a legitimate value, the value should be between +1 and -1.
        if (proportional_error > 1 || proportional_error < -1){
            printf("Exception - Locate line function failed.");
            return 0;
        }

        set_motor(1, speed - (proportional_error * turn_sharpness));
        set_motor(2, speed + (proportional_error * turn_sharpness));
        /*
        The left motor should be in port 1, and the right motor in port 2.

        A negative error indicates the robot has to turn left.
        A positive error indicates the robot has to turn right.
        */

    }

    set_motor(1, 0);
    set_motor(2, 0);

    return 0;

}

/*
This method takes a picture, and uses the luminosity of each of the pixels to determine where the line is.
The error will be returned in the range -1 to +1.
*/
float locate_line(){

    int row = 160;

    char luminosity;

    float weight = 0;
    float weight_sum = 0;
    float number = 0;
    float weight_average = 0;

    take_picture();

    /*
    The loop below sums the weights of the bright pixels,
    then finds an average by dividing by the number of bright pixels.

    A negative average indicates the robot has to turn left,
    a positive average indicate the robot has to turn right.
    */
    for(int i = 0; i < 320; i++){

        luminosity = get_pixel(i, row, 3); //Gets luminosity of pixel from desired row, and from columns 1 to 320.

        weight = (i/159.5) - 1; //Sets appropriate weight value. Equation is set up to range from -1 to +1.

        if(luminosity > luminosity_threshold){

            weight_sum = weight_sum + weight; //Adds the pixels weight to the weight_sum if the pixel is bright enough.
            number++; //Increments number of bright pixels so we can calculate the average later.

        }

    }

    weight_average = weight_sum / number; //Calculates the average of the weighted luminosity values.
    return weight_average; //Returns the average for the locate_line method.

}
