#include <stdio.h>

#include <pthread.h>
#include <time.h>
#include <string.h>

// sudo gcc -Wall
extern "C" int init_hardware();
extern "C" int init(int d_lev);

//camera
extern "C" int take_picture();
extern "C" char get_pixel(int row, int col, int color);
extern "C" void set_pixel(int col, int row, char red,char green,char blue);

//motor
extern "C" int set_motor(int motor,int speed);

//utility
extern "C" int read_analog(int ch_adc);
extern "C" int Sleep(int sec, int usec);
extern "C" int select_IO(int chan, int direct);
extern "C" int write_digital(int chan,char level);
extern "C" int read_digital(int chan);
extern "C" int set_PWM(int chan, int value);

//server
extern "C" int connect_to_server( char server_addr[15],int port);
extern "C" int send_to_server(char message[24]);
extern "C" int receive_from_server(char message[24]);


int v_left = 0;
int v_right = 0;
int speed = 127;

int main(){

    //initialize.
    init_hardware();
    init(0);

    //while 'true' loop makes the robot repeat what it's doing, could put a condition which tells the robots it's finished in here.
    while(true){

        /*
        Use the scan_many_lines method to locate the line.
        Then use the make_decision method to decide what to do.
        */
        make_decision(scan_many_lines());

    }

    //stop robot once done.
    set_motor(1, 0);
    set_motor(2, 0);

    return 0;

}

/*
This method takes a picture, and uses the brightness of each of the pixels to determine where the line is.
*/
float scan_line(int row){

    //declare arrays.
    float brightness[ 319 ];
    float weight[ 319 ];

    //declare color variables for use in the first loop.
    int r;
    int g;
    int b;
    float brightness;

    //declare maths variables for use in the second loop.
    float sum = 0;
    float number = 0;
    float average = 0;

    //Declares loop increment variables.
    int i = 0;
    int j = 0;

    //Takes a picture and stores in memory.
    take_picture();

    /*
    This loop takes information about the picture and creates two arrays.

    The brightness array is given a 1 or 0 value for each pixel based on whether the robot thinks it's looking at line or not.
    The weight array simply has numbers ranging from -159.5 to +159.5 for each pixel.
    */
    for(i = 0; i < 320; i++){

        //Find the brightness of a pixel in appropriate row.
        r = get_pixel(row, i, 1);
        g = get_pixel(row, i, 2);
        b = get_pixel(row, i, 3);
        brightness = (r + g + b)/3;

        //Puts a brightness value between 1 and 0 into the brightness array.
        brightness[ i ] = brightness / 256;

        //Puts appropriate weight value in 'i' position of weight array.
        //159.5 is subtracted because this is half of 319, so the values will range from -159.5 to +159.5.
        weight[ i ] = i - 159.5;

    }

    /*
    This loop sums the weights of the bright pixels,
    then finds an average by dividing by the number of bright pixels.

    A negative average indicates the robot has to turn left,
    a positive average indicate the robot has to turn right.
    */
    for(j = 0; j < 320; j++){

        //Adds the brightness of a pixel multiplied by it's weight to the sum.
        sum = sum + brightness[ j ] * weight[ j ];
        
        //Adds one to the number of values taken so we can calculate the average later.
        number++;

    }

    //Calculates the average of the weighted brightness values.
    average = sum / number;

    /*
    The 'average' is an average taken of values ranging from -159.5 to +159.5,
    so the 'average' must also be in this range.
    */

    return average;

}

/*
This method calls the scan_line method multiple times for different rows in order to give a more accurate result.
*/

float scan_many_lines(){

    //declare variables for calculating average.
    int number = 0;
    float sum = 0;

    /*
    This loop repeatedly uses the scan_line method,
    and calculates the average of each average value, creating a very accurate reading.
    */
    for(int i = 0; i < 240; i = i + 40){
        sum = sum + scan_line(i);
        number++;
    }

    //calculates average given to the sum of each scan_line and the number taken.
    float average = sum / number;

    //returns the average value so it can be used to make a decision.
    return average;
}

/*
This method is designed to make decisions based on values returned from the scan_many_lines method.
*/
int make_decision(float line_position){

    /*
    The left motor should be in port 1, and the right motor in port 2.

    A negative average indicates the robot has to turn left,
    a positive average indicate the robot has to turn right.

    This means we decrease the speed of the left wheel on negative averages, and vice versa for positive.
    This gives the added benefit of slowing down for sharp corners.
    */

    if(line_position < 0){
        //turn to the left as indicated by the negative value.
        set_motor(1, speed + line_position);
    }else{
        //turn to the left as indicated by the positive value.
        set_motor(2, speed - line_position);
    }

}

